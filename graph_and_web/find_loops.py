import sys
from other_functions import get_next_flow_index
from Loop import Loop


def equals2(path1, path2):
    if len(path1) != len(path2):
        return False
    for i in range(0, len(path1)):
        if path1[i].node_name != path2[i].node_name:
            return False
    return True


def is_new2(loops, loop_candidate):
    for loop in loops:
        if equals2(loop, loop_candidate):
            return False
    return True


def find_all_loops_of_len2(node_dict, first_node, loop_len):
    loops = []
    loop_candidates = [first_node]
    curr_node = first_node
    flow_index = 0
    if (loop_len - 1) < len(node_dict):
        while len(loop_candidates) != loop_len:
            if flow_index == sys.maxint:
                return []
            prev_node = curr_node
            curr_node = node_dict[curr_node.next_node_name(flow_index)]
            flow_index = get_next_flow_index(curr_node, flow_index)
            if prev_node.node_name != curr_node.node_name:
                loop_candidates.append(curr_node)
        while flow_index != sys.maxint:
            prev_node = curr_node
            curr_node = node_dict[curr_node.next_node_name(flow_index)]
            flow_index = get_next_flow_index(curr_node, flow_index)

            if prev_node.node_name == curr_node.node_name:
                continue

            if loop_candidates[-1].node_name == loop_candidates[0].node_name and \
                    is_new2(loops, loop_candidates):
                loops.append(loop_candidates)
            loop_candidates = loop_candidates[1:]
            loop_candidates.append(curr_node)
    return loops


def equals(path1, path2):
    if len(path1) != len(path2):
        return False
    for i in range(0, len(path1)):
        if path1[i] != path2[i]:
            return False
    return True


def is_new(loops, loop_candidate):
    for loop in loops:
        if loop.equal_with(loop_candidate):
            return loop
    return None


def find_all_loops_of_len(node_dict, nodes_ls_in_order, loop_len):
    loops = []
    loop_candidate = []
    curr_node_name = nodes_ls_in_order[0]
    node_index = 1
    if loop_len < len(node_dict):
        while len(loop_candidate) != loop_len:
            if node_index >= len(nodes_ls_in_order):
                return []
            prev_node_name = curr_node_name
            curr_node_name = nodes_ls_in_order[node_index]
            node_index += 1
            if prev_node_name != curr_node_name:
                loop_candidate.append(curr_node_name)

        while node_index < len(nodes_ls_in_order):
            prev_node_name = curr_node_name
            curr_node_name = nodes_ls_in_order[node_index]
            node_index += 1

            if prev_node_name == curr_node_name:
                continue

            if loop_candidate[0] == curr_node_name:
                old_loop = is_new(loops, loop_candidate)
                if old_loop == None:
                    loops.append(Loop(loop_candidate))
                else:
                    old_loop.increment_count()
            loop_candidate = loop_candidate[1:]
            loop_candidate.append(curr_node_name)
    return loops


def filter_loops_above_threshold(all_loops, threshold):
    all_filtered_loops = []
    number_of_loops = 0
    for loops in all_loops:
        filtered_loops = []
        for loop in loops:
            if loop.count >= threshold:
                filtered_loops.append(loop)
                number_of_loops += 1
        all_filtered_loops.append(filtered_loops)
    return all_filtered_loops, number_of_loops


def get_loops_in_range(node_dict, nodes_ls_in_order, loop_len1, loop_len2, loop_count_threshold):
    all_loops = []
    number_of_loops = 0
    for llen in range(loop_len1, loop_len2 + 1):
        new_loops = find_all_loops_of_len(node_dict, nodes_ls_in_order, llen)
        number_of_loops += len(new_loops)
        all_loops.append(new_loops)
    if loop_count_threshold > 1:
        all_loops, number_of_loops = filter_loops_above_threshold(all_loops, loop_count_threshold)
    return all_loops, number_of_loops

if __name__ == "__main__":
    print range(5, 10)