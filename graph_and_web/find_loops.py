from collections import deque
from Loop import Loop


def equals2(path1, path2):
    if len(path1) != len(path2):
        return False
    for i in range(0, len(path1)):
        if path1[i] != path2[i]:
            return False
    return True


def find_loop_in_list(loops, loop_candidate):
    for loop in loops:
        if loop.equal_with(loop_candidate):
            return loop
    return None


def loop_to_normal_form(loop_candidate):
    min_node_name = min(loop_candidate)
    min_node_name_i = loop_candidate.index(min_node_name)
    return loop_candidate[min_node_name_i:] + loop_candidate[:min_node_name_i]


def init_loop_candidate(node_list, loop_len, node_list_len):
    curr_node_name = node_list[0]
    loop_candidate = deque([curr_node_name])
    node_index = 1
    while len(loop_candidate) < loop_len:
        if node_index >= node_list_len:
            return None, -1
        prev_node_name = curr_node_name
        curr_node_name = node_list[node_index]
        node_index += 1
        if prev_node_name != curr_node_name:
            loop_candidate.append(curr_node_name)
    if node_index >= node_list_len:
        return None, -1
    return loop_candidate, node_index


def pop_first_in_deque(loop_deque):
    loop_deque.popleft()


def loop_deque_to_list(loop_deque):
    return list(loop_deque)


def is_loop_in_prev_found_loop(loop, prev_loop):
    if not prev_loop:
        return False
    return prev_loop[1:] == loop


def find_all_loops_of_len(node_list, loop_len):
    loops = []
    node_list_len = len(node_list)
    if loop_len <= node_list_len:
        # Initialize loop candidate to wanted length
        loop_candidate_in_deque, node_index = \
            init_loop_candidate(node_list, loop_len, node_list_len)

        # Node list was too short
        if loop_candidate_in_deque is None:
            return loops

        prev_node_name = loop_candidate_in_deque[-1]
        curr_node_name = node_list[node_index]
        node_index += 1
        prev_loop = []

        while node_index < node_list_len:
            # Do not show self-loops in cycles
            if prev_node_name != curr_node_name:
                # Cycle test
                if loop_candidate_in_deque[0] == curr_node_name:
                    loop_candidate_in_list = loop_deque_to_list(loop_candidate_in_deque)
                    old_loop = find_loop_in_list(loops, loop_candidate_in_list)
                    if old_loop is None:
                        if not is_loop_in_prev_found_loop(loop_candidate_in_list, prev_loop):
                            loops.append(Loop(list(loop_candidate_in_list)))
                    else:
                        old_loop.increment_count()
                    prev_loop = loop_candidate_in_list
                    prev_loop.append(curr_node_name)
                else:
                    prev_loop = []

                pop_first_in_deque(loop_candidate_in_deque)
                loop_candidate_in_deque.append(curr_node_name)

            prev_node_name = curr_node_name
            curr_node_name = node_list[node_index]
            node_index += 1
    return loops


def filter_loops_under_threshold(all_loops, threshold):
    all_filtered_loops = []
    number_of_loops = 0
    for loops in all_loops:
        filtered_loops = []
        for loop in loops:
            if loop.count >= threshold:
                filtered_loops.append(loop)
                number_of_loops += 1
        all_filtered_loops.append(filtered_loops)
    return all_filtered_loops, number_of_loops


def find_loops_in_range(node_ls, loop_len1, loop_len2, loop_count_threshold):
    all_loops = []
    number_of_loops = 0
    for llen in range(loop_len1, loop_len2 + 1):
        new_loops = find_all_loops_of_len(node_ls, llen)
        number_of_loops += len(new_loops)
        all_loops.append(new_loops)
    if loop_count_threshold > 0:
        all_loops, number_of_loops = filter_loops_under_threshold(all_loops, loop_count_threshold)
    return all_loops, number_of_loops


if __name__ == '__main__':

    nl = [1, 0, 1, 5, 2, 5, 0, 0, 1, 1, 0, 1, 0, 1, 2, 5, 2, 2, 5, 2, 1]
    loop = find_all_loops_of_len(nl, 2)
    print range(1, 2)
