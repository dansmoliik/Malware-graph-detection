from os import path
import properties
from Node import Node
from filter_data import filter_protocol_or_port, only_examined_src_ip


def create_node_name(line_splits):
    dst_addr = line_splits[properties.FLOW_DST_ADDR_I]
    d_port = line_splits[properties.FLOW_D_PORT_I]
    proto = line_splits[properties.FLOW_PROTO_I]
    return '{0}-{1}-{2}'.format(dst_addr, d_port, proto)


def mk_graph(path_to_file, src_ip_address, filter_args_str):
    curr_node = Node("")

    node_dict = {}
    nodes_ls_in_order = []
    read_smth = False

    edges_count = 0
    if not path.isfile(path_to_file):
        return properties.STR_ERROR, None

    with open(path_to_file, "r") as f:
        for line in f:
            line_splits = line.split(",")
            if len(line_splits) > 1 and only_examined_src_ip(src_ip_address, line_splits[properties.FLOW_SRC_ADDR_I]):
                read_smth = True
                if not filter_protocol_or_port(line_splits, filter_args_str):
                    node_name = create_node_name(line_splits)
                    nodes_ls_in_order.append(node_name)
                    if not (node_name in node_dict):
                        node_dict[node_name] = Node(node_name)
                    next_node = node_dict[node_name]
                    curr_node.add_new_flow(node_name, line_splits, edges_count)
                    next_node.increment_count()
                    next_node.add_parent(curr_node.node_name)
                    curr_node = next_node
                    edges_count += 1

    if not read_smth:
        return properties.STR_EMPTY, None
    return node_dict, nodes_ls_in_order
