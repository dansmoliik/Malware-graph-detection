import properties
from Node import Node
from filter_data import filter_protocol_or_port


def create_node_name(line):
    line_splits = line.split(",")
    dst_addr = line_splits[properties.DST_ADDR_I]
    d_port = line_splits[properties.D_PORT_I]
    proto = line_splits[properties.PROTO_I]
    return '{0}-{1}-{2}'.format(dst_addr, d_port, proto)


def find_max_number_of_edges(node_dict):
    max_flows_to_self = 0
    max_flows_number = 0
    max_node_count = 0
    for node_name in node_dict:
        node = node_dict[node_name]
        if node_name in node.edges:
            flows_to_self = len(node.edges[node_name].flows)
            if max_flows_to_self < flows_to_self:
                max_flows_to_self = flows_to_self
        if max_node_count < node.count:
            max_node_count = node.count
        for edge_dst in node.edges:
            flows_number = len(node.edges[edge_dst].flows)
            if max_flows_number < flows_number:
                max_flows_number = flows_number
    return max_node_count, max_flows_to_self, max_flows_number


def mk_graph(data, filter_args_str):
    if data == "":
        return {}, None
    line, data_rest = data.split("\n", 1)
    node_name = create_node_name(line)
    first_node = curr_node = Node(node_name)
    first_node.count = 1
    node_dict = {node_name: curr_node}

    nodes_ls_in_order = [node_name]

    edges_count = 0
    for line in data_rest.splitlines():
        if not filter_protocol_or_port(line, filter_args_str):
            node_name = create_node_name(line)
            nodes_ls_in_order.append(node_name)
            if not node_name in node_dict:
                node_dict[node_name] = Node(node_name)
            next_node = node_dict[node_name]
            curr_node.add_new_flow(node_name, line, edges_count)
            next_node.increment_count()
            next_node.add_parent(curr_node.node_name)
            curr_node = next_node
            edges_count += 1

    return node_dict, first_node, nodes_ls_in_order
