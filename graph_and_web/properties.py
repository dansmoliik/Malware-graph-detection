STR_BINETFLOW_EXT = ".binetflow"
STR_FILELIST_EXT = ".filelist"
STR_ARGLIST_EXT = ".arglist"
STR_CSV_EXT = ".csv"
STR_MD_EXT = ".md"
STR_JSON_EXT = ".json"

STR_EMPTY = ""
STR_ERROR = "error"
STR_LABEL_NORMAL = "Normal"
STR_LABEL_INFECTED = "Infected"
STR_LABEL_UNKNOWN = "Unknown"

ERROR_NOT_ENOUGHT_ARGS = "Error: There should be at least 2 input arguments:\n" \
                         "\"-p <path to .binetflow (with file extension) file>\" " \
                         "and \"-ip <IP address>\".\n"
ERROR_STR_MISSING_PATH_OR_IP = "Error: You have not specified either \"-p <path_to_file>\" or \"-ip <ip_address>\"." \
                               "These are 2 mandatory arguments.\n" \
                               "Use main.py -h to see help for this program.\n"
ERROR_STR_NOT_END_WITH_EXT = "Error: File name \"{}\" does not end with \"{}\" extension.\n"
ERROR_STR_EMPTY_DATA = "Error: Nothing was read from file \"{}\", be sure to check if specified IP address \"{}\" " \
                       "is somewhere in the file as source IP address.\n"
ERROR_STR_FILE_NOT_EXIST = "Error: File \"{}\" does not exist.\n"

FLOW_START_TIME_I = 0
FLOW_DUR_I = 1
FLOW_PROTO_I = 2
FLOW_SRC_ADDR_I = 3
FLOW_DST_ADDR_I = 6
FLOW_D_PORT_I = 7
FLOW_STATE_I = 8
FLOW_TOT_PKTS_I = 11
FLOW_TOT_BYTES_I = 12
FLOW_SRC_BYTES_I = 13

GJSON_NODE_MIN_MAX_COUNT = 5
GJSON_EDGE_MIN_MAX_SIZE = 10
GJSON_SELF_LOOP_MIN_MAX_COUNT = 10
GJSON_NODE_DEFAULT_VISUALISATION_COLOR_GROUP = 0
GJSON_NODE_DEFAULT_VISUALISATION_COLOR_GROUPS_COUNT = 6
GJSON_NODE_VISUALISATION_SIZE_MIN = 5
GJSON_VISULISATION_RANGE_SIZE_OF_NODE_SIZE = 10
GJSON_EDGE_DEFAULT_VISUALISATION_COLOR_GROUP = 0
GJSON_EDGE_IN_CYCLE_VISUALISATION_COLOR_GROUP = 1
GJSON_EDGE_VISUALISATION_SIZE_MIN = 5
GJSON_VISULISATION_RANGE_SIZE_OF_EDGE_SIZE = 150

HELP_STR = "Name\n\n" \
           "    Graph analysis of malware behaviour\n\n" \
           "Synopsis\n\n" \
           "    main.py -p input_file -ip source_ip [OPTIONAL PARAMETER]\n\n" \
           "Description\n\n" \
           "    This program can be used to extract features from binetflows file. Written in and for Python2.7.\n\n" \
           "Mandatory parameters\n" \
           "    -p <input_file>, --path <input_file>\n" \
           "        file you want to process\n" \
           "    -ip <ip_address>\n" \
           "        source IP address you want to examine\n" \
           "Optional parameters\n" \
           "    -f1\n" \
           "        filter nodes with count==1\n" \
           "    -f <args>\n" \
           "        Filter specific protocol, port or port-protocol combination.\n" \
           "        <args> are in following format: [port]-[protocol].\n" \
           "        Use '|' join more protocols or ports.\n" \
           "    -nt <threshold>\n" \
           "        Threshold for node counts (nodes under this threshold won't be used in calculations).\n" \
           "        Default: 0 (if specified threshold is lower, feature is not calculated)\n" \
           "    -slt <threshold>\n" \
           "        Threshold for node auto looping (nodes under this threshold won't be used in calculations).\n" \
           "        Default: 0 (if specified threshold is lower, feature is not calculated)\n" \
           "    -et <threshold>\n" \
           "        Threshold for edge size (edges under this threshold won't be used in calculations).\n" \
           "        Default: 0 (if specified threshold is lower, feature is not calculated)\n" \
           "    -ct <threshold>\n" \
           "        Threshold for cycle count (cycles under this threshold won't be used in calculations).\n" \
           "        Default: 0 (if specified threshold is lower, feature is not calculated)\n" \
           "    -clen <len1>[-<len2>]\n" \
           "        Range of cycle lengths to search for.\n" \
           "        Can be one number, or 2 numbers in format <len1>-<len2>\n" \
           "    -csv\n" \
           "        outputs 2 lines in comma separated values format instead of normal output:\n" \
           "            first line: names of values in second line\n" \
           "            second line: actual values\n" \
           "    --less\n" \
           "        less output to standart output\n" \
           "    --noout\n" \
           "        no output to standard output\n" \
           "    --nooutf\n" \
           "        no output to files\n" \
           "    --gjson\n" \
           "        save created graph in json file\n" \
           "    --label <label>\n" \
           "        label this file (for csv output)\n" \
           "    -h, --help\n" \
           "        display this help\n" \
