from find_cycles import find_cycles_in_range


def get_number_of_all_nodes(node_dict):
    return len(node_dict)


def get_nodes_and_counts(node_dict, threshold):
    nodes = []
    counts = []
    for node_name in node_dict:
        node = node_dict[node_name]
        if node.count >= threshold:
            nodes.append(node_name)
            counts.append(node.count)
    return nodes, counts


def get_self_looping_nodes_and_counts(node_dict, threshold):
    wanted_nodes = []
    counts = []
    for node_name in node_dict:
        node = node_dict[node_name]
        if node_name in node.edges.keys():
            if len(node.edges[node_name].flows) >= threshold:
                wanted_nodes.append(node_name)
                counts.append(len(node.edges[node_name].flows))
        elif threshold == 0:
            wanted_nodes.append(node_name)
            counts.append(0)
    return wanted_nodes, counts


def get_number_of_all_edges(node_dict):
    total = 0
    for node_name in node_dict:
        node = node_dict[node_name]
        for edge_dst in node.edges:
            if edge_dst != node_name:
                total += 1
    return total


def get_nodes_with_edge_size(node_dict, threshold):
    src_nodes = []
    dst_nodes = []
    counts = []
    for node_name in node_dict:
        node = node_dict[node_name]
        for edge_dst in node.edges:
            if edge_dst != node_name and len(node.edges[edge_dst].flows) >= threshold:
                src_nodes.append(node_name)
                dst_nodes.append(edge_dst)
                counts.append(len(node.edges[edge_dst].flows))
    return src_nodes, dst_nodes, counts


def find_max_number_of_edges_self_loops_node_counts(node_dict):
    max_flows_to_self = 0
    max_flows_number = 0
    max_node_count = 0
    for node_name in node_dict:
        node = node_dict[node_name]
        if node_name in node.edges:
            flows_to_self = len(node.edges[node_name].flows)
            if max_flows_to_self < flows_to_self:
                max_flows_to_self = flows_to_self
        if max_node_count < node.count:
            max_node_count = node.count
        for edge_dst in node.edges:
            flows_number = len(node.edges[edge_dst].flows)
            if max_flows_number < flows_number:
                max_flows_number = flows_number
    return max_node_count, max_flows_to_self, max_flows_number


def get_loops_in_range(node_ls, llen1, llen2, lt):
    return find_cycles_in_range(node_ls, llen1, llen2, lt)