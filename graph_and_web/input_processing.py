from other_functions import is_number, swap_numbers


def is_numerical_argument_valid(arg_i, args, argc):
    if arg_i >= argc:
        return False
    return is_number(args[arg_i])


def raise_wrong_input_exception(arg):
    raise Exception("Wrong input argument at {}.".format(arg))


def are_filter_args_valid(arg_i, args, argc):
    if arg_i >= argc:
        return False
    if args[arg_i].startswith("-"):
        return False
    filter_args = args[arg_i].split("|")
    for arg in filter_args:
        split_args = arg.split(",")
        if len(split_args) == 1:
            return is_number(arg) or not arg.startswith("-")
        elif len(split_args) == 2:
            return is_number(split_args[0]) and not is_number(split_args[1])
        else:
            return False


def get_loops_lens(arg):
    error_happened = False
    arg_value1 = arg_value2 = -1
    if is_number(arg):
        arg_value1 = arg_value2 = int(arg)
    else:
        arg_splits = arg.split("-")
        if len(arg_splits) != 2:
            error_happened = True
        else:
            if not is_number(arg_splits[0]) or not is_number(arg_splits[1]):
                error_happened = True
                return error_happened, 0, 0
            arg_value1 = int(arg_splits[0])
            arg_value2 = int(arg_splits[1])
            if arg_value1 > arg_value2:
                arg_value1, arg_value2 = swap_numbers(arg_value1, arg_value2)
    if arg_value1 < 2:
        arg_value1 = 2
    if arg_value2 < 2:
        arg_value2 = 2
    return error_happened, arg_value1, arg_value2


def process_input_args(args):
    filter_nodes_with_one_occurrence = less = no_out = no_outf = False
    filter_args = ""
    alt = et = llen1 = llen2 = lt = -1

    argc = len(args)
    arg_i = 3
    error_happened = False
    while arg_i < argc:
        curr_arg = args[arg_i]
        if curr_arg == "-f1":
            filter_nodes_with_one_occurrence = True
        elif curr_arg == "-f":
            if are_filter_args_valid(arg_i + 1, args, argc):
                arg_i += 1
                filter_args = args[arg_i]
            else:
                error_happened = True
        elif curr_arg == "-alt":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                alt = int(args[arg_i])
            else:
                error_happened = True
        elif curr_arg == "-et":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                et = int(args[arg_i])
            else:
                error_happened = True
        elif curr_arg == "-llen":
            error_happened, llen1, llen2 = get_loops_lens(args[arg_i + 1])
            if not error_happened:
                arg_i += 1
        elif curr_arg == "-lt":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                lt = int(args[arg_i])
            else:
                error_happened = True
        elif curr_arg == "--less":
            less = True
        elif curr_arg == "--noout":
            no_out = True
        elif curr_arg == "--nooutf":
            no_outf = True

        if error_happened:
            raise_wrong_input_exception(args[arg_i])
        arg_i += 1
    return filter_nodes_with_one_occurrence, filter_args, alt, et, llen1, llen2, lt, less, no_out, no_outf
