from other_functions import is_number, swap_numbers
from properties import STR_LABEL_UNKNOWN, HELP_STR


def is_numerical_argument_valid(arg_i, args, argc):
    if arg_i >= argc:
        return False
    return is_number(args[arg_i])


def raise_wrong_input_exception(arg):
    raise Exception("Wrong input argument at {}.".format(arg))


def are_filter_args_valid(arg_i, args, argc):
    if arg_i >= argc:
        return False
    if args[arg_i].startswith("-"):
        return False
    filter_args = args[arg_i].split("|")
    for arg in filter_args:
        split_args = arg.split("-")
        if len(split_args) == 1:
            return is_number(arg) or not arg.startswith("-")
        elif len(split_args) == 2:
            return is_number(split_args[0]) and not is_number(split_args[1])
        else:
            return False


def get_loops_lens(arg):
    error_happened = False
    arg_value1 = arg_value2 = -1
    if is_number(arg):
        arg_value1 = arg_value2 = int(arg)
    else:
        arg_splits = arg.split("-")
        if len(arg_splits) != 2:
            error_happened = True
        else:
            if not is_number(arg_splits[0]) or not is_number(arg_splits[1]):
                error_happened = True
                return error_happened, 0, 0
            arg_value1 = int(arg_splits[0])
            arg_value2 = int(arg_splits[1])
            if arg_value1 > arg_value2:
                arg_value1, arg_value2 = swap_numbers(arg_value1, arg_value2)
    if arg_value1 < 2:
        arg_value1 = 2
    if arg_value2 < 2:
        arg_value2 = 2
    return error_happened, arg_value1, arg_value2


def display_help():
    print(HELP_STR)
    exit()


def process_input_args(args):
    f1_filter = less = csv_output = no_out = no_outf = gjson = ntg = sltg = etg = False
    filter_args = ""
    path_to_file = ""
    ip_address = ""
    label = STR_LABEL_UNKNOWN
    nt = slt = et = ct = 0
    clen1 = clen2 = 2

    argc = len(args)
    arg_i = 0
    error_happened = False
    while arg_i < argc:
        curr_arg = args[arg_i]
        if curr_arg == "-f1":
            f1_filter = True
        elif curr_arg == "-f":
            if are_filter_args_valid(arg_i + 1, args, argc):
                arg_i += 1
                filter_args = args[arg_i]
            else:
                error_happened = True
        elif curr_arg == "-nt":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                nt = int(args[arg_i])
            else:
                error_happened = True
        elif curr_arg == "-slt":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                slt = int(args[arg_i])
            else:
                error_happened = True
        elif curr_arg == "-et":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                et = int(args[arg_i])
            else:
                error_happened = True
        elif curr_arg == "-clen":
            error_happened, clen1, clen2 = get_loops_lens(args[arg_i + 1])
            if not error_happened:
                arg_i += 1
        elif curr_arg == "-ct":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                ct = int(args[arg_i])
            else:
                error_happened = True
        elif curr_arg == "-ntg":
            ntg = True
        elif curr_arg == "-sltg":
            sltg = True
        elif curr_arg == "-etg":
            etg = True
        elif curr_arg == "-csv":
            csv_output = True
        elif curr_arg == "--less":
            less = True
        elif curr_arg == "--noout":
            no_out = True
        elif curr_arg == "--nooutf":
            no_outf = True
        elif curr_arg == "--gjson":
            gjson = True
        elif curr_arg == "--path" or curr_arg == "-p":
            arg_i += 1
            path_to_file = args[arg_i]
        elif curr_arg == "-ip":
            arg_i += 1
            ip_address = args[arg_i]
        elif curr_arg == "--label":
            arg_i += 1
            label = args[arg_i]
        elif curr_arg == "-h" or curr_arg == "--help":
            display_help()
        else:
            error_happened = True

        if error_happened:
            raise_wrong_input_exception(args[arg_i])
        arg_i += 1
    return path_to_file, ip_address, f1_filter, filter_args, nt, slt, et, clen1, clen2, ct, csv_output, less, no_out,\
        no_outf, gjson, ntg, sltg, etg, label
