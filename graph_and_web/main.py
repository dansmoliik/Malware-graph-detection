import sys
from os import path
import filter_data
from make_graph import mk_graph, save_graph_to_json


def print_list_node_names_counts(nodes, counts):
    print "---------------\n"
    for i in range(0, len(nodes)):
        print "{:<30}".format(nodes[i]), "{:>10}".format(counts[i])
    print "---------------\n"


def print_list_edges_counts(src_nodes, dst_nodes, counts):
    print "---------------\n"
    for i in range(0, len(src_nodes)):
        print "{:<30}=>{:>30}".format(src_nodes[i], dst_nodes[i]), "{:>10}".format(counts[i])
    print "---------------\n"


def print_list(lst):
    print "---------------\n"
    for item in lst:
        print item
    print "---------------\n"

if __name__ == "__main__":
    if len(sys.argv) >= 3:
        file_name = path.join('data', sys.argv[1])
        ip_address = sys.argv[2]
        data = filter_data.read_and_filter_file_only_examined_src_ip(file_name, ip_address)

        node_dict, first_node = mk_graph(data)

        prev_len = len(node_dict)
        node_dict = filter_data.filter_graph(node_dict)
        print "Removed", prev_len - len(node_dict), "/", prev_len, "nodes"

        autoloops_theshold = 0
        edge_count_threshold = 0
        if len(sys.argv) >= 4:
            autoloops_theshold = int(sys.argv[3])
            if len(sys.argv) >= 5:
                edge_count_threshold = int(sys.argv[4])

        al_nodes, al_counts = filter_data.find_auto_looping_nodes_and_counts(node_dict, autoloops_theshold)
        edge_src_nodes, edge_dst_nodes, e_counts = \
            filter_data.find_nodes_with_edge_size(node_dict, edge_count_threshold)
        print "Number of autolooping nodes above threshold: ", len(al_nodes)
        print "Autolooping nodes above threshold with autolooping counts", autoloops_theshold
        print_list_node_names_counts(al_nodes, al_counts)
        print "Nodes with edge number above threshold", edge_count_threshold
        print_list_edges_counts(edge_src_nodes, edge_dst_nodes, e_counts)
        save_graph_to_json(node_dict)
    else:
        print "There should be 2 input arguments:\n" \
              "name of .binetflow (with file extension) file (from \"data\" directory)\n" \
              "and an IP address.\n"
