import sys
from os import path
import filter_data
from make_graph import mk_graph, save_graph_to_json
from other_functions import is_number


def print_list_node_names_counts(nodes, counts):
    print "---------------\n"
    for i in range(0, len(nodes)):
        print "{:<30}".format(nodes[i]), "{:>10}".format(counts[i])
    print "---------------\n"


def print_list_edges_counts(src_nodes, dst_nodes, counts):
    print "---------------\n"
    for i in range(0, len(src_nodes)):
        print "{:<30}=>{:>30}".format(src_nodes[i], dst_nodes[i]), "{:>10}".format(counts[i])
    print "---------------\n"


def is_numerical_argument_valid(arg_i, args, argc):
    if arg_i >= argc:
        return False
    return is_number(args[arg_i])


def raise_wrong_input_exception(arg):
    raise Exception("Wrong input argument at {}.".format(arg))


def are_filter_args_valid(arg_i, args, argc):
    if arg_i >= argc:
        return False
    if args[arg_i].startswith("-"):
        return False
    filter_args = args[arg_i].split("|")
    for arg in filter_args:
        split_args = arg.split(",")
        if len(split_args) == 1:
            return is_number(arg) or not arg.startswith("-")
        elif len(split_args) == 2:
            return is_number(split_args[0]) and not is_number(split_args[1])
        else:
            return False


def process_input_args(args):
    filter_nodes_with_one_occurrence = False
    filter_args = ""
    alt = et = 0
    argc = len(args)
    arg_i = 3
    error_happened = False
    while arg_i < argc:
        curr_arg = args[arg_i]
        if curr_arg == "-f1":
            filter_nodes_with_one_occurrence = True
        elif curr_arg == "-f":
            if are_filter_args_valid(arg_i + 1, args, argc):
                arg_i += 1
                filter_args = args[arg_i]
            else:
                error_happened = True
        elif curr_arg == "-alt":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                alt = int(args[arg_i])
            else:
                error_happened = True
        elif curr_arg == "-et":
            if is_numerical_argument_valid(arg_i + 1, args, argc):
                arg_i += 1
                et = int(args[arg_i])
            else:
                error_happened = True

        if error_happened:
            raise_wrong_input_exception(args[arg_i])
        arg_i += 1
    return filter_nodes_with_one_occurrence, filter_args, alt, et

if __name__ == "__main__":
    if len(sys.argv) >= 3:
        file_name = path.join('data', sys.argv[1])
        ip_address = sys.argv[2]
        data = filter_data.read_and_filter_file_only_examined_src_ip(file_name, ip_address)

        filter_nodes_with_one_occurrence, filter_args, alt, et = process_input_args(sys.argv)

        node_dict, first_node = mk_graph(data, filter_args)

        if filter_nodes_with_one_occurrence:
            prev_len = len(node_dict)
            node_dict = filter_data.filter_graph(node_dict)
            print "Removed", prev_len - len(node_dict), "/", prev_len, "nodes"

        al_nodes, al_counts = filter_data.find_auto_looping_nodes_and_counts(node_dict, alt)
        edge_src_nodes, edge_dst_nodes, e_counts = \
            filter_data.find_nodes_with_edge_size(node_dict, et)
        print "Number of autolooping nodes above threshold: ", len(al_nodes)
        print "Nodes above threshold with autolooping counts above threshold", alt
        print_list_node_names_counts(al_nodes, al_counts)
        print "Nodes with edge number above threshold", et
        print_list_edges_counts(edge_src_nodes, edge_dst_nodes, e_counts)
        save_graph_to_json(node_dict)
    else:
        print "There should be 2 input arguments:\n" \
              "name of .binetflow (with file extension) file (from \"data\" directory)\n" \
              "and an IP address.\n"
