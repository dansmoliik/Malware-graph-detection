import sys
from cStringIO import StringIO
from other_functions import error_exit_program, check_if_file_exists, check_if_file_ends_with_ext
import properties
from saving_to_files import save_group_features_to_file
from main import main_function
from GroupCSVStringStream import StringStream


def get_comma_sep_ip_addresses(csips):
    return csips.split(",")


def get_info_from_line_files_list_file(line):
    splits = line.rstrip().split("|")
    file_name = splits[0]
    normal_ip_addresses = get_comma_sep_ip_addresses(splits[1])
    infected_ip_addresses = get_comma_sep_ip_addresses(splits[2])
    unknown_ip_addresses = get_comma_sep_ip_addresses(splits[3])
    return file_name, normal_ip_addresses, infected_ip_addresses, unknown_ip_addresses


def get_list_of_lists_of_args(path_args_list_file):
    args_lists_list = []
    with open(path_args_list_file, "r") as args_list_file:
        for line in args_list_file:
            args_list = line.rstrip().split(" ")
            args_lists_list.append(args_list)
    return args_lists_list


def complete_args(args_lists_list, path, ip):
    args_lists_list_new = []
    for args_list in args_lists_list:
        args_list_new = list(args_list)
        if not("-csv" in args_list_new):
            args_list_new.append("-csv")
        if not("-p" in args_list_new) and not("--path" in args_list_new):
            args_list_new.append("-p")
            args_list_new.append(path)
        if not("-ip" in args_list_new):
            args_list_new.append("-ip")
            args_list_new.append(ip)
        args_lists_list_new.append(args_list_new)
    return args_lists_list_new


def extract_features_from_single_file_one_ip_one_args_list(args_list):
    main_function(args_list)


def extract_features_from_single_file_one_ip(path_to_file, ip_address, args_lists_list):
    args_lists_list_curr = complete_args(args_lists_list, path_to_file, ip_address)

    for args_list in args_lists_list_curr:
        extract_features_from_single_file_one_ip_one_args_list(args_list)


def extract_features_from_single_file(path_to_file, normal_ip_addresses, infected_ip_addresses,
                                      unknown_ip_addresses, args_list_list):
    for ip_address in normal_ip_addresses:
        if ip_address:
            extract_features_from_single_file_one_ip(path_to_file, ip_address, args_list_list)
    for ip_address in infected_ip_addresses:
        if ip_address:
            extract_features_from_single_file_one_ip(path_to_file, ip_address, args_list_list)
    for ip_address in unknown_ip_addresses:
        if ip_address:
            extract_features_from_single_file_one_ip(path_to_file, ip_address, args_list_list)


def extract_features_from_more_files(path_to_files_list, path_to_arg_list_file):
    args_lists_list = get_list_of_lists_of_args(path_to_arg_list_file)
    with open(path_to_files_list, "r") as files_list_file:
        for line in files_list_file:
            path_to_file, normal_ip_addresses, infected_ip_addresses, unknown_ip_addresses = \
                get_info_from_line_files_list_file(line)
            check_if_file_ends_with_ext(path_to_file, properties.STR_BINETFLOW_EXT)
            check_if_file_exists(path_to_file)
            extract_features_from_single_file(path_to_file, normal_ip_addresses, infected_ip_addresses,
                                              unknown_ip_addresses, args_lists_list)


if __name__ == '__main__':
    if len(sys.argv) != 4:
        error_exit_program("Need 3 arguments in this order: \n"
                           "1. path to file containing list of .binetflows file,\n"
                           "2. path to file containing list of arguments you want to run on .binetflow file "
                           "(one line == one set of args),\n"
                           "3. name of experiment (file name)\n")

    path_to_files_list_file = sys.argv[1]
    path_to_args_list_file = sys.argv[2]
    output_file_name = sys.argv[3]

    check_if_file_ends_with_ext(path_to_files_list_file, properties.STR_FILELIST_EXT)
    check_if_file_exists(path_to_files_list_file)

    check_if_file_ends_with_ext(path_to_args_list_file, properties.STR_ARGLIST_EXT)
    check_if_file_exists(path_to_args_list_file)

    with StringStream() as output:
        extract_features_from_more_files(path_to_files_list_file, path_to_args_list_file)
    print output.data
    save_group_features_to_file(output_file_name, output.data)
